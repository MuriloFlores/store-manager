name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/order_manager:latest

      - name: SSH key setup
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Sync migration files to server
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER:  ${{ secrets.EC2_USERNAME}}
          SOURCE: 'infrastructure/db/migrations/'
          TARGET: '${{ secrets.EC2_APP_DIR }}/migrations'
          ARGS: '-rltgoDvz --delete'

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'

            cd ${{ secrets.EC2_APP_DIR }}
          
            echo "--- Starting Deployment on EC2 ---"

            echo "1/5 - Pulling the latest backend image from Docker Hub..."
            docker compose -f docker-compose.prod.yml pull backend

            echo "2/5 - Loading environment variables from .env file..."
            export $(grep -v '^#' .env | xargs)

            echo "3/5 - Building database URL for migration..."
            DATABASE_URL="postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=require"
          
            echo "4/5 - Running database migrations..."
            docker run --rm --network host -v $(pwd)/migrations:/migrations \
            migrate/migrate -path /migrations -database "${DATABASE_URL}" up

            echo "5/5 - Starting application services with Docker Compose..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate backend
          
            echo "--- Deployment script finished. Cleaning up... ---"
            docker image prune -af
          EOF