name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug
        run: |
          echo "DockerHub Username: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "EC2 Host: ${{ secrets.EC2_HOST }}"
          echo "EC2 Username: ${{ secrets.EC2_USERNAME }}"
          echo "EC2 App Directory: ${{ secrets.EC2_APP_DIR }}"
          echo "DB User: ${{ secrets.DB_USER }}"
          echo "DB Password: ${{ secrets.DB_PASSWORD }}"
          echo "DB Host: ${{ secrets.DB_HOST }}"
          echo "DB Port: ${{ secrets.DB_PORT }}"
          echo "DB Name: ${{ secrets.DB_NAME }}"
          
          echo "=================================================="
          echo "== list workspace files =="
          ls -laR
          echo "=================================================="
          echo "== show content =="
          cat ./.github/workflows/cd-deploy.yml
          echo "=================================================="

      - name: build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/order-manager:latest

      - name: SSH key setup
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          
            cd ${{ secrets.EC2_APP_DIR }}
          
            docker pull muriloflores/order_manager:latest

            docker run --rm --network host -v $(pwd)/infrastructure/db/migrations:/migrations \
            migrate/migrate -path /migrations \
            -database "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable" up

            docker compose -f docker-compose.prod.yml up -d --remove-orphans
          
            docker image prune -af
          EOF